using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.ComponentModel;
using AppLogic;

namespace SystemView.ContentDisplays
{
    // To call CommTestDisplay = new CommTestDisplay();
    //
    // CLASS: CommTestDisplay
    //
    // Description: This class implements UI and back-end logic for the Communication Test function of the PTE. This class initializes a WPF 
    //              component that builds the front end display of the Comm Test result. The class is instanciated from a DisplayView instance that places
    //              this WPF display inside the Session Docking mechanism. This function is used as a debugging tool to test the communication between the PTE and OBC.
    //
    // Private Data:
    //      bool _commTestPass                                      - Variable containing the Pass/Fail status of the OBC communications test
    //
    // Public Get/Set Accessors:
    //      LEDState HealthyLEDState(get)                           - Accessor for _healthyLEDState variable
    //      LEDState MaintLEDState(get)                             - Accessor for _maintLEDState variable
    //      bool CommTestPass(get)                                  - Accessor for _commTestPass variable
    //
    // Public Methods:
    //      string ToString()                                       - Override of ToString method for CommTestDisplay Class
    //
    // Private Methods:
    //      commTestFail()                                          - Sets the Communication Test result status to FAIL and makes corresponding UI updates       
    //      commTestPass(string Time)                               - Sets the Communication Test result status to PASS and makes corresponding UI updates
    //      commTestStart                                           - Event handler for the Start Comm Test button of the UI. This event handler initiates the comm test 
    //                                                                through an instance of the Comm Test object found in the App Logic library. 
    //
    // Constructors:
    //      BattLvlDisplay()
    //
    // Other DataTypes:
    //
    public partial class CommTestDisplay : UserControl
    {
        #region PrivateMembers
        private bool _commTestPass;
        #endregion

        #region Accessors
        public BitmapImage CommTestResult { get; }
        public string CommTestElapsedTime { get; }
        public bool CommTestPass
        {
            get
            {
                return _commTestPass;
            }
        }
        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor for the CommTestDisplay class. Creates display UI.
        /// </summary>
        public CommTestDisplay()
        {
            try
            {
                // Generate the UI. This calls the logic generated by the WPF compiler to build the display.
                InitializeComponent();

                // Set the initial packet response time to 0.0 because we have not sent any requests yet
                TimeDisplay.Text = "0.0 ms";

                // Set the initial comm test status indications to their default state
                IDMatch.Source = new BitmapImage(new Uri(@"C:\Users\WIN10TESTPC\source\repos\SystemView_Telerik_Version\Icons\icons8-checked-16-grey.png"));
                StableIP.Source = new BitmapImage(new Uri(@"C:\Users\WIN10TESTPC\source\repos\SystemView_Telerik_Version\Icons\icons8-checked-16-grey.png"));

                // Set the comm test test result status to the default
                _commTestPass = false;
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("CommTestDisplay::Constructor-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }
        }
        #endregion

        #region PublicMethods
        /// <summary>
        /// Override of ToString method for CommTestDisplay Class
        /// </summary>
        public override string ToString()
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("CommTestDisplay Info - Test Status: {0}", (_commTestPass == true ? "PASS" : "FAIL")));

                return sb.ToString();
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("CommTestDisplay::ToString-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
                return null;
            }
        }
        #endregion

        #region PrivateMethods

        /// <summary>
        /// Sets the Communication Test result status to FAIL and makes corresponding UI updates
        /// </summary>
        private void commTestFail()
        {          
            try
            {
                // Set the UI Comm Test result indications to the FAIL condition
                IDMatch.Source = new BitmapImage(new Uri(@"C:\Users\WIN10TESTPC\source\repos\SystemView_Telerik_Version\Icons\icons8-cancel-16.png"));
                StableIP.Source = new BitmapImage(new Uri(@"C:\Users\WIN10TESTPC\source\repos\SystemView_Telerik_Version\Icons\icons8-cancel-16.png"));

                // Set the Comm Test result variable to FAIL
                _commTestPass = false;
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("CommTestDisplay::commTestFail-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }
        }

        /// <summary>
        /// Sets the Communication Test result status to PASS and makes corresponding UI updates
        /// </summary>
        /// <param name="Time">Time taken for PTE to successfully initiate and receive a PING request</param>
        private void commTestPass(string Time)
        {
            // Display the elapsed time taken to complete the Comm Test to the UI
            TimeDisplay.Text = Time + "ms";

            // Set the UI Comm Test result indications to the PASS condition
            IDMatch.Source = new BitmapImage(new Uri(@"C:\Users\WIN10TESTPC\source\repos\SystemView_Telerik_Version\Icons\icons8-checked-16.png"));
            StableIP.Source = new BitmapImage(new Uri(@"C:\Users\WIN10TESTPC\source\repos\SystemView_Telerik_Version\Icons\icons8-checked-16.png"));

            // Set the Comm Test result variable to PASS
            _commTestPass = true;
        }

        /// <summary>
        /// Event handler for the Start Comm Test button of the UI. This event handler initiates the comm test through an instance of 
        /// the Comm Test object found in the App Logic library. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void commTestStart(object sender, RoutedEventArgs e)
        {
            try
            {
                // Create an instance of the Comm Test OBC HAL object that will perform the Communications Test
                CommTest CommTester = new CommTest();

                // Perform the communications test and act on the results
                if (CommTester.ConnectionEstablished)
                {
                    // Test Passes - get the network latency time from the Comm Test object and update the UI witht the PASS Status
                    commTestPass(CommTester.ElapsedTime);
                }
                else
                {
                    // Test fails - Update the UI with the FAIL status
                    commTestFail();
                }
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("CommTestDisplay::commTestStart-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }
        }
        #endregion
    }
}
