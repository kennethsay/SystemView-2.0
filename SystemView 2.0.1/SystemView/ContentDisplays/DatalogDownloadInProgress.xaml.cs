using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.ComponentModel;

namespace SystemView.ContentDisplays
{
    // To call DatalogDownloadInProgress = new DatalogDownloadInProgress();
    //
    // CLASS: DatalogDownloadInProgress
    //
    // Description: This class implements UI and back-end logic for a Datalog Download Status Bar. This class is instanciated when a request for datalog download is being
    //              processed by the PTE and a download is in progress. The status bar provides a visual indication of the time left until the download has been completed. 
    //              The status bar increment is measured in percentage complete out of 100%. Each download cycle, the class that created this object provides a percentage
    //              completed and the status bar is updated. 
    //
    // Private Data:
    //      int _percentComplete                                    - Variable containing the status of the datalog download as a measure of the percentage of the download
    //                                                                that has been completed.
    //
    // Public Get/Set Accessors:
    //      int PercentComplete(get/set)                            - Accessor for the _startDate variable
    //
    // Public Methods:
    //      string ToString()                                       - Override of ToString method for DatalogDownloadInProgress Class
    //
    // Private Methods:
    //
    // Constructors:
    //      DatalogDownloadInProgress()
    //
    // Other DataTypes:
    //
    public partial class DatalogDownloadInProgress : UserControl, INotifyPropertyChanged
    {
        #region PrivateMembers
        private int _percentComplete;
        #endregion

        #region Accessors
        // The PercentComplete property is connected to the Status Bar of the UI through a data binding.
        // WPF uses data bindings to automatically progress updates from the backend logic to the UI and vice versa.
        // As the PercentCompleted property is updated to reflect the download status, the value is automatically
        // progressed to the Status bar widget.
        public int PercentComplete
        {
            get
            {
                return _percentComplete;
            }
            set
            {
                _percentComplete = value;
                OnPropertyChanged("PercentComplete");
            }
        }
        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor for the DatalogDownloadInProgress Class. Creates display UI. 
        /// </summary>
        public DatalogDownloadInProgress()
        {
            try
            {
                // Generate the UI. This calls the logic generated by the WPF compiler to build the display.
                InitializeComponent();

                // Now set the Data Context of the class instance
                this.DataContext = this;
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadInProgress::Constructor-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }

        }
        #endregion

        #region PublicMethods
        /// <summary>
        /// Override of ToString method for CommTestDisplay Class
        /// </summary>
        public override string ToString()
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadInProgress Info - Percent Completed: {0}", _percentComplete));

                return sb.ToString();
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadInProgress::ToString-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
                return null;
            }
        }
        #endregion

        #region Property Change Manager

        // The property changed event handler is necessary for the implementation of the INotifyPropertyChanged class. This class handles automatically 
        // variable value updates from the model to the view. The OnPropertyChanged function alerts the display manager of a change in a bound variable 
        // value and causes a MainWindow update to reflect the changes.

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
