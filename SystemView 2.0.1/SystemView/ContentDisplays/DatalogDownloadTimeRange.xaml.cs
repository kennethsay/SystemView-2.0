using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.ComponentModel;

namespace SystemView.ContentDisplays
{
    // To call DatalogDownloadTimeRange = new DatalogDownloadTimeRange();
    //
    // CLASS: DatalogDownloadTimeRange
    //
    // Description: This class implements UI and back-end logic for the Datalog Download by Time Range download type selection of the PTE. This class initializes a WPF 
    //              component that builds the front end display of the download selection. The class is instanciated from a DisplayView instance that places
    //              this WPF display inside the Session Docking mechanism. This function allows the user to specify a time range for the Download function of the 
    //              PTE. This class is instanciated by the Download presentation when the user selects the option to download a datalog from the OBC based on a time range. 
    //
    // Private Data:
    //      DateTime _startDate                                     - DateTime variable specifying the user selected start time for the OBC datalog download
    //      DateTime _endDate                                       - DateTime variable specifying the user selected end time for the OBC datalog download
    //
    // Public Get/Set Accessors:
    //      DateTime StartDateTime(get/set)                         - Accessor for the _startDate variable
    //      DateTime EndDateTime(get/set)                           - Accessor for the _endDate variable
    //
    // Public Methods:
    //      string ToString()                                       - Override of ToString method for DatalogDownloadTimeRange Class
    //
    // Private Methods:
    //      string validateStartTime()                              - Analyzes the user selected Start time and verifies that the following criteria are met:
    //                                                                1. The selected start time is not a future time
    //                                                                2. The selected start time is not before the selected end time
    //      string validateEndTime()                                - Analyzes the user selected End time and verifies that the following criteria are met:
    //                                                                1. The selected end time is not a future time
    //                                                                2. The selected end time is not earlier than the selected start time
    //
    // Constructors:
    //      DatalogDownloadTimeRange()
    //
    // Other DataTypes:
    //
    public partial class DatalogDownloadTimeRange : UserControl, INotifyPropertyChanged, IDataErrorInfo
    {
        #region PrivateMembers
        private DateTime _startDate;
        private DateTime _endDate;
        #endregion

        #region Accessors
        // The StartDateTime and EndDateTime properties are connected to the UI DateTimepicker via a databinding. 
        // WPF uses data bindings to automatically progress updates from the backend logic to the UI and vice versa.
        // As the DateTimepicker is modified by the user to select a start and end time, the values chosen are automatically
        // progressed to the _startDate and _endDate variables through the StartDateTime and EndDateTime properties. 
        // Similarily, changes to these variables in the backend code are automatically progressed to the UI. 
        public DateTime StartDateTime
        {
            get
            {
                return this._startDate;
            }
            set
            {
                this._startDate = value;
            }
        }        
        public DateTime EndDateTime
        {
            get
            {
                return this._endDate;
            }
            set
            {
                this._endDate = value;
            }
        }
        #endregion

        #region Constructor

        /// <summary>
        /// Default constructor for the DatalogDownloadTimeRange class. Creates display UI.
        /// </summary>
        public DatalogDownloadTimeRange()
        {
            try
            {
                // Generate the UI. This calls the logic generated by the WPF compiler to build the display.
                InitializeComponent();

                // Now set the data context of the class to this instance of the class
                DataContext = this;

                // Finally, initialize the EndDateTime to the current time and the StartDateTime to a time
                // 15 minutes before the current time. These are just the default values displayed to the user.
                this.EndDateTime = DateTime.Now;
                this.StartDateTime = EndDateTime.Subtract(TimeSpan.FromMinutes(15));
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadTimeRange::Constructor-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }
        }
        #endregion

        #region PublicMethods
        /// <summary>
        /// Override of ToString method for DatalogDownloadTimeRange Class
        /// </summary>
        public override string ToString()
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadTimeRange Info - Selected Start Time: {0}, Selected End Time: {1}", _startDate.ToString(), _endDate.ToString()));

                return sb.ToString();
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadTimeRange::ToString-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
                return null;
            }
        }
        #endregion

        #region PrivateMethods
        /// <summary>
        /// Analyzes the user selected Start time and verifies that the following criteria are met:
        /// 1. The selected start time is not a future time
        /// 2. The selected start time is not before the selected end time
        /// </summary>
        /// <returns>An error message if the time validation has failed. Null if the validation is successful</returns>
        private string validateStartTime()
        {
            try
            {
                // First verify that the start time is not later than the current time
                if (StartDateTime.CompareTo(DateTime.Now) >= 1)
                {
                    // This is invalid, return an error
                    return "Start Datetime cannot be in the future";
                }
                // Next verify that the start time is not earlier than the end time
                else if (StartDateTime.CompareTo(EndDateTime) >= 0)
                {
                    // This is invalid, return an error
                    return "End Datetime must be later than the start time";
                }
                else
                {
                    // Everything checks out, return null
                    return null;
                }                
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadTimeRange::validateStartTime-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
                return sb.ToString();
            }
        }

        /// <summary>
        /// Analyzes the user selected End time and verifies that the following criteria are met:
        /// 1. The selected end time is not a future time
        /// 2. The selected end time is not earlier than the selected start time
        /// </summary>
        /// <returns>An error message if the time validation has failed. Null if the validation is successful</returns>
        private string validateEndTime()
        {
            try
            {
                // First verify that the end time is not later than the current time
                if (EndDateTime.CompareTo(DateTime.Now) >= 1)
                {
                    // This is invalid, return an error
                    return "End Datetime cannot be in the future";
                }
                // Next verify that the end time is not earlier than the start time
                else if (EndDateTime.CompareTo(StartDateTime) <= 0)
                {
                    // This is invalid, return an error
                    return "End Datetime must be later than the start time";
                }
                else
                {
                    // Everything checks out, return null
                    return null;
                }                
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadTimeRange::validateEndTime-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
                return sb.ToString();
            }
        }
        #endregion

        #region UIHelperProperties

        // The UI helper properties below aid in validating user selected times and relaying error messages to the user.
        // The DateTimepicker gives the user several error alerts when an invalid time is selected. The outer edges of the
        // UI widget will turn red and the error message determined by the property will be displayed in a tooltip next to
        // the widget. These definitions are necessary to the Telerik error validation and MUST NOT BE REMOVED. 

        // DO NOT REMOVE
        public string Error
        {
            get
            {
                return validateStartTime() ?? validateEndTime();
            }
        }

        // DO NOT REMOVE
        public string this[string columnName]
        {
            get
            {
                switch (columnName)
                {
                    case "StartDateTime": return this.validateStartTime();
                    case "EndDateTime": return this.validateEndTime();
                }
                return null;
            }
        }
        #endregion

        #region Property Change Manager

        // This class implements the property changed manager feature of C#/WPF
        // The property changed manager is a UI paradigm used to automatically forward updates to background logic
        // to their respective presentation devices within the presentation layer. The property changed event handler 
        // must be implemented to cause a property to send a UI update request when the property has been modified

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
