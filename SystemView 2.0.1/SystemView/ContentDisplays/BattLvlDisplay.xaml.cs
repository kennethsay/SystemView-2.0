using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using AppLogic;
using System.ComponentModel;

namespace SystemView.ContentDisplays
{
    // To call BattLvlDisplay = new BattLvlDisplay();
    //
    // CLASS: BattLvlDisplay
    //
    // Description: This class implements UI and back-end logic for the Battery Level Display function of the PTE. This class initializes a WPF 
    //              component that builds the front end battery level display. The class is instanciated from a DisplayView instance that places
    //              this WPF display inside the Session Docking mechanism. 
    //
    // Private Data:
    //      BatteryLevel _myBatteryLevel                       - App logic library class that acts as HAL between PTE and OBC and retrieves and parses the system battery level
    //      double BATTERY_LOW_LEVEL                           - Constant specifying the low voltage limit of the CMOS battery on board the OBC. A detected voltage below
    //                                                           this level results in the Maintenance LED of the display to be lit
    //      LEDState _healthyLEDState                          - Contains the state of the Healthy Status Indication LED. State can be ON or OFF
    //      LEDState _maintLEDState                            - Contains the state of the Maintenance Status Indication LED. State can be ON or OFF
    //
    // Public Get/Set Accessors:
    //      LEDState HealthyLEDState                           - Accessor for _healthyLEDState variable
    //      LEDState MaintLEDState                             - Accessor for _maintLEDState variable
    //
    // Public Methods:
    //      string ToString()                                  - Override of ToString method for BattLvlDisplay Class
    //
    // Private Methods:
    //      updateVoltageReading()
    //
    // Constructors:
    //      BattLvlDisplay()
    //
    // Other DataTypes:
    //

    public partial class BattLvlDisplay : UserControl, INotifyPropertyChanged
    {
        #region PrivateMembers
        private BatteryLevel _myBattLvl;
        private double BATTERY_LOW_LEVEL = 3.0;
        private LEDIndicator.LEDState _healthyLEDState;
        private LEDIndicator.LEDState _maintLEDState;
        #endregion

        #region Accessors
        public LEDIndicator.LEDState HealthyLEDState
        {
            get
            {
                return this._healthyLEDState;
            }
            set
            {
                this._healthyLEDState = value;
                OnPropertyChanged("HealthyLEDState");
            }
        }
                
        public LEDIndicator.LEDState MaintLEDState
        {
            get
            {
                return this._maintLEDState;
            }
            set
            {
                this._maintLEDState = value;
                OnPropertyChanged("MaintLEDState");
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor for BattLvlDisplay Class. Creates display UI and sends initial voltage read request to the OBC.
        /// </summary>
        public BattLvlDisplay()
        {
            try
            {
                // Generate the UI. This calls the logic generated by the WPF compiler to build the display.
                InitializeComponent();

                // Set up the class instance Data Context
                this.DataContext = this;

                // Create a new BatteryLevel HAL instance. This is the object used to read battery levels from the OBC. 
                _myBattLvl = new BatteryLevel();

                // Now update the voltage reading to display the current value to the UI.
                updateVoltageReading();
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("BattLvlDisplay::Constructor-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }
        }
        #endregion

        #region PublicMethods
        /// <summary>
        /// Override of ToString method for BattLvlDisplay Class
        /// </summary>
        public override string ToString()
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("BattLvlDisplay Info - Voltage Reading: {0}, Maintenance LED State: {1}, Healthy LED State: {2}",
                                         VoltageDisplay.Text, _maintLEDState.ToString(), _healthyLEDState.ToString()));

                return sb.ToString();
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("BattLvlDisplay::ToString-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
                return null;
            }
        }
        #endregion

        #region PrivateMethods

        /// <summary>
        /// Uses the Battery Level HAL to obtain a voltage reading of the OBC CMOS battery
        /// </summary>
        private void updateVoltageReading()
        {
            try
            {
                // Get the current reading of the battery level from the OBC HAL object and update the voltage reading.
                // This automatically writes the voltage level to the UI
                VoltageDisplay.Text = _myBattLvl.Level.ToString() + " Volts";

                // Now examine the voltage level to manage the maintenance and health LEDS. 
                if (_myBattLvl.Level < BATTERY_LOW_LEVEL)
                {
                    // If the battery level reading is below the low voltage limit, do the following:
                    // Turn ON the Red Maintenance LED
                    // Turn OFF the Green Healthy LED
                    MaintLEDState = LEDIndicator.LEDState.ON;
                    HealthyLEDState = LEDIndicator.LEDState.OFF;
                }
                else
                {
                    // If the battery level reading is above the low voltage limit, do the following:
                    // Turn OFF the Red Maintenance LED
                    // Turn ON the Green Healthy LED
                    MaintLEDState = LEDIndicator.LEDState.OFF;
                    HealthyLEDState = LEDIndicator.LEDState.ON;
                }
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("BattLvlDisplay::updateVoltageReading-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }
        }
        #endregion

        #region Property Changed Manager
        // This class implements the property changed manager feature of C#/WPF
        // The property changed manager is a UI paradigm used to automatically forward updates to background logic
        // to their respective presentation devices within the presentation layer. The property changed event handler 
        // must be implemented to cause a property to send a UI update request when the property has been modified

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
