using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.ComponentModel;

namespace SystemView.ContentDisplays
{
    // To call DatalogDownloadBySize = new DatalogDownloadBySize();
    //
    // CLASS: DatalogDownloadBySize
    //
    // Description: This class implements UI and back-end logic for the Datalog Download by Size download type selection of the PTE. This class initializes a WPF 
    //              component that builds the front end display of the download selection. The class is instanciated from a DisplayView instance that places
    //              this WPF display inside the Session Docking mechanism. This class is instanciated by the Download presentation when the user selects the option to download
    //              a datalog from the OBC based on a time selection. The user enters an integer value specifying the percentage of the datalogging device record for download. 
    //              This integer value is returned through the event handler when the user modifies the percentage value in the UI.
    //
    // Private Data:
    //      int _downloadPercentage                                 - Variable containing an integer value representing the user entered amount of data to download from the 
    //                                                                OBC datalogger expressed as a percentage.
    //
    // Public Get/Set Accessors:
    //      int DownloadPercentage                                  - Accessor for _downloadPercentage variable
    //
    // Public Methods:
    //      string ToString()                                       - Override of ToString method for DatalogDownloadBySize Class
    //
    // Private Methods:
    //
    // Constructors:
    //      DatalogDownloadBySize()
    //
    // Other DataTypes:
    //
    public partial class DatalogDownloadBySize : UserControl, INotifyPropertyChanged
    {
        #region PrivateMembers
        private int _downloadPercentage;
        #endregion

        #region Accessors
        public int DownloadPercentage
        {
            get
            {
                return _downloadPercentage;
            }
            set
            {
                _downloadPercentage = value;
            }
        }
        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor for the DatalogDownloadBySize class. Creates the UI. 
        /// </summary>
        public DatalogDownloadBySize()
        {
            try
            {
                // Generate the UI. This calls the logic generated by the WPF compiler to build the display.
                InitializeComponent();

                // Now set the data context of the class to this instance of the class
                this.DataContext = this;

                // Finally, initialize the DownloadPercentage to 0
                this.DownloadPercentage = 0;
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadBySize::Constructor-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
            }

        }
        #endregion        

        #region PublicMethods
        /// <summary>
        /// Override of ToString method for DatalogDownloadBySize Class
        /// </summary>
        public override string ToString()
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadBySize Info - SelecPercentage: {0}", _downloadPercentage));

                return sb.ToString();
            }
            catch (Exception ex)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(String.Format("DatalogDownloadBySize::ToString-threw exception {0}", ex.ToString()));

                Console.WriteLine(sb.ToString());
                return null;
            }
        }
        #endregion

        #region PropertyChangeManager

        // This class implements the property changed manager feature of C#/WPF
        // The property changed manager is a UI paradigm used to automatically forward updates to background logic
        // to their respective presentation devices within the presentation layer. The property changed event handler 
        // must be implemented to cause a property to send a UI update request when the property has been modified

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #endregion
    }
}
